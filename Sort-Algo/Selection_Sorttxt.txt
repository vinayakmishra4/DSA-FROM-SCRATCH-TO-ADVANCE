Selection Sort Algorithm

Time Complexity:
Best Case: O(n^2)
Average Case: O(n^2)
Worst Case: O(n^2)

Space Complexity: O(1) – In-place sorting

Stable: ❌ (Not stable by default)
Adaptive: ❌

Working Principle:
- Repeatedly find the minimum element from the unsorted part and put it at the beginning.
- Works by maintaining two subarrays in a given array:
  1. The subarray which is already sorted.
  2. The remaining subarray which is unsorted.

Steps:
1. Start from index 0 and assume the element at index 0 is the minimum.
2. Compare this with the rest of the array to find the actual minimum.
3. Swap the minimum with the first element.
4. Repeat the process for the remaining unsorted part of the array.

Pseudocode:
```
for i from 0 to n - 2:
    min_index = i
    for j from i + 1 to n - 1:
        if array[j] < array[min_index]:
            min_index = j
    swap array[i] with array[min_index]
```

Use Case:
- Simple and easy to implement.
- Not suitable for large datasets.
